AWSTemplateFormatVersion:               "2010-09-09"
Description:                            "An EventBridge pipeline that extracts messages from a CloudWatch Logs subscription"

## Note: some content from https://github.com/kdgregory/aws-misc/blob/trunk/lambda/cloudwatch-log-transform-2/


Resources:

##
## Kinesis Streams 
##

  SubscriptionStream:
    Type:                               "AWS::Kinesis::Stream"
    Properties:
      Name:                             !Sub "${AWS::StackName}-Subscription"
      ShardCount:                       1


  DestinationStream:
    Type:                               "AWS::Kinesis::Stream"
    Properties:
      Name:                             !Sub "${AWS::StackName}-Destination"
      ShardCount:                       1


##
## The EventBridge pipe that connects these streams
##

  PipelineRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      RoleName:                         !Sub "${AWS::StackName}-EventBridgePipe-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Principal:
            Service:                    "pipes.amazonaws.com"
          Action:                       "sts:AssumeRole"
      Policies:
        - PolicyName:                   "ReadSource"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "kinesis:DescribeStream"
                -                       "kinesis:DescribeStreamSummary"
                -                       "kinesis:GetRecords"
                -                       "kinesis:GetShardIterator"
                -                       "kinesis:ListStreams"
                -                       "kinesis:ListShards"
              Resource:
                -                       !GetAtt SubscriptionStream.Arn
        - PolicyName:                   "WriteTarget"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "kinesis:PutRecord"
                -                       "kinesis:PutRecords"
              Resource:
                -                       !GetAtt DestinationStream.Arn
        - PolicyName:                   "InvokeTransform"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "lambda:InvokeFunction"
              Resource:
                -                       !GetAtt EnrichmentLambda.Arn


  Pipeline:
    Type:                               "AWS::Pipes::Pipe"
    Properties: 
      Name:                             !Ref AWS::StackName
      Description:                      "Transforms CloudWatch log events from a subscription into individual events"
      RoleArn:                          !GetAtt PipelineRole.Arn
      Source:                           !GetAtt SubscriptionStream.Arn
      SourceParameters: 
        KinesisStreamParameters:
          BatchSize:                    100
          MaximumBatchingWindowInSeconds: 30
          StartingPosition:             TRIM_HORIZON
      Enrichment:                       !GetAtt EnrichmentLambda.Arn
      Target:                           !GetAtt DestinationStream.Arn
      TargetParameters: 
        KinesisStreamParameters:
          PartitionKey:                 "$.cloudwatch.log_stream"


##
## Enrichment Lambda to unpack CloudWatch Logs events
##

  EnrichmentLambdaLogGroup:
    Type:                               "AWS::Logs::LogGroup"
    DeletionPolicy:                     "Delete"
    Properties:
      LogGroupName:                     !Sub "/aws/lambda/${AWS::StackName}-Enrichment"
      RetentionInDays:                  7


  EnrichmentLambdaRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      Path:                             "/lambda/"
      RoleName:                         !Sub "${AWS::StackName}-EnrichmentLambda-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Principal:
            Service:                    "lambda.amazonaws.com"
          Action:                       "sts:AssumeRole"
      Policies:
        - PolicyName:                   "OperationalPermissions"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Sid:                    "Logging"
                Effect:                 "Allow"
                Action:
                  -                     "logs:CreateLogStream"
                  -                     "logs:PutLogEvents"
                Resource:
                  -                     !GetAtt EnrichmentLambdaLogGroup.Arn


  EnrichmentLambda:
    Type:                               "AWS::Lambda::Function"
    Properties: 
      FunctionName:                     !Sub "${AWS::StackName}-Enrichment"
      Description:                      "Transforms CloudWatch Logs events as part of an EventBridge pipeline"
      Role:                             !GetAtt EnrichmentLambdaRole.Arn
      Runtime:                          "python3.9"
      Handler:                          "index.lambda_handler"
      MemorySize:                       1024
      Timeout:                          30
      Code: 
        ZipFile:                        |
                                        # Copyright 2022 Keith D Gregory
                                        #
                                        # Licensed under the Apache License, Version 2.0 (the "License");
                                        # you may not use this file except in compliance with the License.
                                        # You may obtain a copy of the License at
                                        #
                                        #     http://www.apache.org/licenses/LICENSE-2.0
                                        #
                                        # Unless required by applicable law or agreed to in writing, software
                                        # distributed under the License is distributed on an "AS IS" BASIS,
                                        # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                        # See the License for the specific language governing permissions and
                                        # limitations under the License.
                                        ################################################################################

                                        """ This is used in an EventBridge pipeline, to extract log events from a
                                            CloudWatch Logs subscription, so that they can be stored as individual
                                            events on a destination stream.

                                            Along the way it it transforms the event to JSON (if it's not already) and
                                            adds information about the log stream and (for Lambdas) execution times.
                                            """

                                        import base64
                                        import gzip
                                        import json
                                        import logging

                                        from datetime import datetime, timezone

                                        logger = logging.getLogger(__name__)
                                        logger.setLevel(logging.INFO)

                                        def lambda_handler(event, context):
                                            logger.info(f"received {len(event)} messages from source")
                                            result = []
                                            for message in event:
                                                result += transform_messages(message)
                                            logger.info(f"produced {len(result)} messages")
                                            return result
                                            
                                        def transform_messages(message):
                                            """ Handles a single Kinesis message from the source event.
                                                """
                                            data = base64.b64decode(message['data'])
                                            # CloudWatch Logs messages are always GZipped, but this is copy-paste code
                                            if data.startswith(b'\x1f\x8b'):
                                                data = gzip.decompress(data)
                                            payload = json.loads(data)
                                            if payload['messageType'] == 'DATA_MESSAGE':
                                                log_group = payload['logGroup']
                                                log_stream = payload['logStream']
                                                events = payload['logEvents']
                                                logger.debug(f"processing {len(events)} log events")
                                                return [transform_log_event(log_group, log_stream, event) for event in events]
                                            else:
                                                return []

                                        def transform_log_event(log_group, log_stream, log_event):
                                            """ Processes a single log event from the subscription. The returned value
                                                is stringified JSON. If the source message can be parsed as JSON, it
                                                will be returned with the enhancements described below. If it can't be
                                                parsed as JSON, then a new JSON object will be created with a "message"
                                                key. In either case, the returned JSON will have a "cloudwatch" key that
                                                contains the log group and stream name, and the CloudWatch timestamp.
                                                WARNING: this will overwrite any prior "cloudwatch" key.
                                                """
                                            message = log_event['message']
                                            try:
                                                result = json.loads(message)
                                            except:
                                                result = { "message": message }
                                            result['cloudwatch'] = {
                                                "log_group": log_group,
                                                "log_stream": log_stream,
                                                "id": log_event['id'],
                                                "timestamp": format_timestamp(log_event['timestamp']),
                                            }
                                            return result
                                            
                                        def format_timestamp(timestamp):
                                            """ Utility function to take a numeric (millis since epoch) timestamp and
                                                format it as an ISO-8601 string using the built-in datetime object.
                                                """
                                            if timestamp:
                                                dt = datetime.fromtimestamp(timestamp / 1000, timezone.utc)
                                                dt = dt.replace(microsecond=(1000 * (timestamp % 1000)))
                                                return dt.isoformat()
                                            else:
                                                return ""

##
## Activity Lambda: writes logs to CloudWatch
##

  ActivityLambdaLogGroup:
    Type:                               "AWS::Logs::LogGroup"
    DeletionPolicy:                     "Delete"
    Properties:
      LogGroupName:                     !Sub "/aws/lambda/${AWS::StackName}-Activity"
      RetentionInDays:                  7


  ActivityLambdaExecutionRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      RoleName:                         !Sub "${AWS::StackName}-ActivityLambda-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Principal:
            Service:                    "lambda.amazonaws.com"
          Action:                       "sts:AssumeRole"
      Policies:
        - PolicyName:                   "OperationalPermissions"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              - Sid:                    "Logging"
                Effect:                 "Allow"
                Action:
                  -                     "logs:CreateLogStream"
                  -                     "logs:PutLogEvents"
                Resource:
                  -                     !GetAtt ActivityLambdaLogGroup.Arn


  ActivityLambda:
    Type:                               "AWS::Lambda::Function"
    Properties:
      FunctionName:                     !Sub "${AWS::StackName}-Activity"
      Description:                      "Writes some log messages"
      Role:                             !GetAtt ActivityLambdaExecutionRole.Arn
      Runtime:                          "python3.9"
      Handler:                          "index.lambda_handler"
      Code:
        ZipFile:                        |
                                        import json
                                        import logging

                                        logger = logging.getLogger(__file__)
                                        logger.setLevel(logging.INFO)

                                        def lambda_handler(event, context):
                                          logger.info("Hello, world")
                                          logger.info(json.dumps(event))
      MemorySize:                       512
      Timeout:                          10


##
## CloudWatch Logs subscription
##

  SubscriptionRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      RoleName:                         !Sub "${AWS::StackName}-Subscription-${AWS::Region}"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Principal:
            Service:                    !Sub "logs.${AWS::Region}.amazonaws.com"
          Action:                       "sts:AssumeRole"
      Policies:
        - PolicyName:                   "WriteToKinesis"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "kinesis:Describe*"
                -                       "kinesis:CreateStream"
                -                       "kinesis:Put*"
              Resource:                 !GetAtt SubscriptionStream.Arn


  Subscription:
    Type:                               "AWS::Logs::SubscriptionFilter"
    Properties: 
      LogGroupName:                     !Ref ActivityLambdaLogGroup
      DestinationArn:                   !GetAtt SubscriptionStream.Arn
      RoleArn:                          !GetAtt SubscriptionRole.Arn
      FilterName:                       !Ref AWS::StackName
      FilterPattern:                    ""
