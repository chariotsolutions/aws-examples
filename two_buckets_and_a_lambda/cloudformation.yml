AWSTemplateFormatVersion:               "2010-09-09"
Description:                            "An example of S3 file handling using Lambdas"

Parameters:

  BaseBucketName:
    Description:                        "A prefix used for all S3 buckets created by this stack"
    Type:                               "String"
    Default:                            ""

  DeploymentStageName:
    Description:                        "Identifies the initial deployment stage for API Gateway"
    Type:                               "String"
    Default:                            "dev"

  SignedUrlPathComponent:
    Description:                        "The path component that identifies the SignedURL endpoint (this is a stack-wide constant)"
    Type:                               "String"
    Default:                            "signedurl"

  CredentialsPathComponent:
    Description:                        "The path component that identifies the Credentials endpoint (this is a stack-wide constant)"
    Type:                               "String"
    Default:                            "credentials"


Resources:

  ##
  ## Buckets
  ##

  StaticBucket:
    Type:                               "AWS::S3::Bucket"
    Properties: 
      BucketName:                       !Sub "${BaseBucketName}-static"
      AccessControl:                    "Private"


  UploadBucket:
    Type:                               "AWS::S3::Bucket"
    DependsOn:                          [ ProcessorInvocationPermission ]
    Properties: 
      BucketName:                       !Sub "${BaseBucketName}-uploads"
      AccessControl:                    "Private"
      CorsConfiguration:
        CorsRules:
          -
            AllowedMethods:             ["PUT"]
            AllowedOrigins:             [ "*" ]
            AllowedHeaders:             [ "*" ]
      LifecycleConfiguration: 
        Rules:
          -
            Id:                         "DeleteUnprocessedUploads"
            ExpirationInDays:           1
            Status:                     "Enabled"
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event:                      "s3:ObjectCreated:*"
            Function:                   !GetAtt ProcessorFunction.Arn


  ArchiveBucket:
    Type:                               "AWS::S3::Bucket"
    Properties: 
      BucketName:                       !Sub "${BaseBucketName}-archive"
      AccessControl:                    "Private"

  ##
  ## The file processing Lambda
  ##

  ProcessorLogGroup:
    Type:                               "AWS::Logs::LogGroup"
    DeletionPolicy:                     "Delete"
    Properties:
      LogGroupName:                     !Sub "/aws/lambda/${AWS::StackName}-Processor"
      RetentionInDays:                  7


  ProcessorRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      Path:                             "/lambda/"
      RoleName:                         !Sub "${AWS::StackName}-Processor-ExecutionRole"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Principal:
            Service:                    "lambda.amazonaws.com"
          Action:                       "sts:AssumeRole"
      ManagedPolicyArns:
        -                               "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        -
          PolicyName:                   "ReadFromSource"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "s3:DeleteObject"
                -                       "s3:HeadObject"
                -                       "s3:GetObject"
              Resource:                 [ !Sub "arn:aws:s3:::${BaseBucketName}-uploads/*" ]
        -
          PolicyName:                   "WriteToDestination"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "s3:PutObject"
              Resource:                 [ !Sub "arn:aws:s3:::${BaseBucketName}-archive/*" ]


  ProcessorFunction:
    Type:                               "AWS::Lambda::Function"
    Properties: 
      FunctionName:                     !Sub "${AWS::StackName}-Processor"
      Description:                      !Sub "Processes files uploaded to ${BaseBucketName}-uploads and moves them to ${BaseBucketName}-archive"
      Role:                             !GetAtt ProcessorRole.Arn
      Runtime:                          "python3.7"
      Handler:                          "index.lambda_handler"
      Code: 
        ZipFile:                        |
                                        import boto3
                                        import os
                                        
                                        
                                        archive_bucket = os.environ['ARCHIVE_BUCKET']
                                        
                                        s3_client = boto3.client('s3')
                                        
                                        
                                        def lambda_handler(event, context):
                                            for record in event.get('Records', []):
                                                eventName = record['eventName']
                                                bucket = record['s3']['bucket']['name']
                                                key = record['s3']['object']['key']
                                                try:
                                                    process(s3_client, bucket, key)
                                                    archive(s3_client, bucket, key)
                                                except Exception as ex:
                                                    # we'll print the exception and continue with the event
                                                    print(ex)
                                        
                                        
                                        def process(s3_client, bucket, key):
                                            print(f'processing s3://{bucket}/{key}')
                                            meta = s3_client.head_object(Bucket=bucket, Key=key)
                                            print(f"filesize = {meta['ContentLength']}")
                                        
                                        
                                        def archive(s3_client, bucket, key):
                                            print(f'moving s3://{bucket}/{key} to s3://{archive_bucket}/{key}')
                                            s3_client.copy(
                                                CopySource={'Bucket': bucket, 'Key': key },
                                                Bucket=archive_bucket,
                                                Key=key)
                                            s3_client.delete_object(Bucket=bucket, Key=key)
      MemorySize:                       256
      Timeout:                          15
      Environment: 
        Variables:
          ARCHIVE_BUCKET:               !Ref ArchiveBucket


  ProcessorInvocationPermission:
    Type:                               "AWS::Lambda::Permission"
    DependsOn:                          [ ProcessorFunction ]
    Properties:
      Action:                           "lambda:InvokeFunction"
      FunctionName:                     !GetAtt ProcessorFunction.Arn
      Principal:                        "s3.amazonaws.com"
      SourceAccount:                    !Ref AWS::AccountId
      SourceArn:                        !Sub "arn:aws:s3:::${BaseBucketName}-uploads"

  ##
  ## A Lambda that creates a signed URL
  ##

  SignedUrlLambdaLogGroup:
    Type:                               "AWS::Logs::LogGroup"
    DeletionPolicy:                     "Delete"
    Properties:
      LogGroupName:                     !Sub "/aws/lambda/${AWS::StackName}-SignedUrl"
      RetentionInDays:                  7


  SignedUrlLambdaRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      Path:                             "/lambda/"
      RoleName:                         !Sub "${AWS::StackName}-SignedUrl-ExecutionRole"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Principal:
            Service:                    "lambda.amazonaws.com"
          Action:                       "sts:AssumeRole"
      ManagedPolicyArns:
        -                               "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        -
          PolicyName:                   "AssumeUploadRole"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "s3:PutObject"
              Resource:                 [ !Sub "arn:aws:s3:::${BaseBucketName}-uploads/*" ]


  SignedUrlLambda:
    Type:                               "AWS::Lambda::Function"
    Properties: 
      FunctionName:                     !Sub "${AWS::StackName}-SignedUrl"
      Description:                      !Sub "Generates a signed URL when given a key"
      Role:                             !GetAtt SignedUrlLambdaRole.Arn
      Runtime:                          "python3.7"
      Handler:                          "index.lambda_handler"
      Code: 
        ZipFile:                        |
                                        import boto3
                                        import json

                                        def lambda_handler(event, context):
                                            print(json.dumps(event))
                                            key = "FIXME-extract_from_event"
                                            return {
                                                'statusCode': 200,
                                                'headers': {
                                                    'Content-Type': 'application/json'
                                                },
                                                'body': json.dumps({
                                                    'url': 'bar'
                                                })
                                            }
      MemorySize:                       256
      Timeout:                          15
      Environment: 
        Variables:
          UPLOAD_BUCKET:                !Ref UploadBucket


  SignedUrlLambdaPermission:
    Type:                               "AWS::Lambda::Permission"
    DependsOn:                          [ SignedUrlLambda ]
    Properties:
      Action:                           "lambda:InvokeFunction"
      FunctionName:                     !GetAtt SignedUrlLambda.Arn
      Principal:                        "apigateway.amazonaws.com"
      SourceArn:                        !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/POST/api/${SignedUrlPathComponent}"

  ##
  ## A Lambda that generates limited-scope credentials
  ##

  CredentialsLambdaLogGroup:
    Type:                               "AWS::Logs::LogGroup"
    DeletionPolicy:                     "Delete"
    Properties:
      LogGroupName:                     !Sub "/aws/lambda/${AWS::StackName}-Credentials"
      RetentionInDays:                  7


  CredentialsLambdaRole:
    Type:                               "AWS::IAM::Role"
    Properties:
      Path:                             "/lambda/"
      RoleName:                         !Sub "${AWS::StackName}-Credentials-ExecutionRole"
      AssumeRolePolicyDocument:
        Version:                        "2012-10-17"
        Statement:
          Effect:                       "Allow"
          Principal:
            Service:                    "lambda.amazonaws.com"
          Action:                       "sts:AssumeRole"
      ManagedPolicyArns:
        -                               "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        -
          PolicyName:                   "AssumeUploadRole"
          PolicyDocument:
            Version:                    "2012-10-17"
            Statement:
              Effect:                   "Allow"
              Action:
                -                       "s3:PutObject"
              Resource:                 [ !Sub "arn:aws:s3:::${BaseBucketName}-uploads/*" ]


  CredentialsLambda:
    Type:                               "AWS::Lambda::Function"
    Properties: 
      FunctionName:                     !Sub "${AWS::StackName}-Credentials"
      Description:                      !Sub "Generates limited-scope credentials when given a key"
      Role:                             !GetAtt CredentialsLambdaRole.Arn
      Runtime:                          "python3.7"
      Handler:                          "index.lambda_handler"
      Code: 
        ZipFile:                        |
                                        import boto3
                                        import json

                                        def lambda_handler(event, context):
                                            print(json.dumps(event))
                                            key = "FIXME-extract_from_event"
                                            return {
                                                'statusCode': 200,
                                                'headers': {
                                                    'Content-Type': 'application/json'
                                                },
                                                'body': json.dumps({
                                                    'url': 'bar'
                                                })
                                            }
      MemorySize:                       256
      Timeout:                          15
      Environment: 
        Variables:
          UPLOAD_BUCKET:                !Ref UploadBucket


  CredentialsLambdaPermission:
    Type:                               "AWS::Lambda::Permission"
    DependsOn:                          [ CredentialsLambda ]
    Properties:
      Action:                           "lambda:InvokeFunction"
      FunctionName:                     !GetAtt CredentialsLambda.Arn
      Principal:                        "apigateway.amazonaws.com"
      SourceArn:                        !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/POST/api/${CredentialsPathComponent}"


  ###
  ### API Gateway
  ###

  APIGatewayDeployment:
    Type:                               "AWS::ApiGateway::Deployment"
    Properties: 
      Description:                      "Deployment of the Two Buckets and a Lambda example"
      RestApiId:                        !Ref APIGateway
      StageName:                        !Ref DeploymentStageName

  APIGateway:
    Type:                               "AWS::ApiGateway::RestApi"
    Properties: 
      Name:                             !Sub "${AWS::StackName}"
      Description:                      "Endpoint for the Two Buckets and a Lambda example"
      EndpointConfiguration: 
        Types:                          [ "REGIONAL" ]


  APIGatewayStaticResource:
    Type:                               "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId:                        !Ref APIGateway
      ParentId:                         !GetAtt APIGateway.RootResourceId
      PathPart:                         "{proxy+}"


  APIGatewayAPIResource:
    Type:                               "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId:                        !Ref APIGateway
      ParentId:                         !GetAtt APIGateway.RootResourceId
      PathPart:                         "api"


  APIGatewaySignedUrlResource:
    Type:                               "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId:                        !Ref APIGateway
      ParentId:                         !Ref APIGatewayAPIResource
      PathPart:                         !Ref SignedUrlPathComponent


  APIGatewayCredentialsResource:
    Type:                               "AWS::ApiGateway::Resource"
    Properties: 
      RestApiId:                        !Ref APIGateway
      ParentId:                         !Ref APIGatewayAPIResource
      PathPart:                         !Ref CredentialsPathComponent


  APIGatewayRootMethod:
    Type:                               "AWS::ApiGateway::Method"
    Properties: 
      OperationName:                    "DefaultIndexHtml"
      RestApiId:                        !Ref APIGateway
      ResourceId:                       !GetAtt APIGateway.RootResourceId
      HttpMethod:                       "GET"
      AuthorizationType:                "NONE"
      Integration: 
        Type:                           "HTTP_PROXY"
        Uri:                            !Sub "https://${BaseBucketName}-static.s3.amazonaws.com/index.html"
        IntegrationHttpMethod:          "GET"
        PassthroughBehavior:            "WHEN_NO_MATCH"


  APIGatewayStaticMethod:
    Type:                               "AWS::ApiGateway::Method"
    Properties: 
      OperationName:                    "StaticContent"
      RestApiId:                        !Ref APIGateway
      ResourceId:                       !Ref APIGatewayStaticResource
      HttpMethod:                       "GET"
      AuthorizationType:                "NONE"
      RequestParameters:
        method.request.path.proxy:      true
      Integration: 
        Type:                           "HTTP_PROXY"
        Uri:                            !Sub "https://${BaseBucketName}-static.s3.amazonaws.com/{proxy}"
        IntegrationHttpMethod:          "GET"
        RequestParameters:
          integration.request.path.proxy: "method.request.path.proxy"
        PassthroughBehavior:            "WHEN_NO_MATCH"


  APIGatewaySignedUrlMethod:
    Type:                               "AWS::ApiGateway::Method"
    Properties: 
      OperationName:                    "RetrieveSignedUrl"
      RestApiId:                        !Ref APIGateway
      ResourceId:                       !Ref APIGatewaySignedUrlResource
      HttpMethod:                       "POST"
      AuthorizationType:                "NONE"
      Integration: 
        Type:                           "AWS_PROXY"
        Uri:                            !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SignedUrlLambda}/invocations"
        IntegrationHttpMethod:          "POST"
        ContentHandling:                "CONVERT_TO_TEXT"
        PassthroughBehavior:            "WHEN_NO_MATCH"


  APIGatewayCredentialsMethod:
    Type:                               "AWS::ApiGateway::Method"
    Properties: 
      OperationName:                    "RetrieveCredentials"
      RestApiId:                        !Ref APIGateway
      ResourceId:                       !Ref APIGatewayCredentialsResource
      HttpMethod:                       "POST"
      AuthorizationType:                "NONE"
      Integration: 
        Type:                           "AWS_PROXY"
        Uri:                            !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CredentialsLambda}/invocations"
        IntegrationHttpMethod:          "POST"
        ContentHandling:                "CONVERT_TO_TEXT"
        PassthroughBehavior:            "WHEN_NO_MATCH"
